#!/bin/bash

#
# Write colored output
#

red() {
  echo -e "\033[0;31m$1\033[0m"
}
cyan() {
  echo -e "\033[0;36m$1\033[0m"
}

#
# Abort with an exit message
#

abort() {
  echo "`red abort:` $1"
  # ring
  echo -en "\007"
  exit 1
}

#
# Ask for sudo access if not already available
# Note: use `sudo -k` to loose sudo access
#

check_sudo() {
  echo "check `cyan sudo`..."
  # without sudo access return nothing
  if [[ -z `sudo -n uptime 2>/dev/null` ]]; then
    # sudo prompt
    sudo echo >/dev/null
  fi
}


#
# By default /usr/local/bin is placed after /usr/bin in the $PATH
# This function updates the $PATH with /usr/local/bin placed just before /usr/bin
# It's a temporary path, only valid in this install session
#

path_local_first() {
  # convert $PATH to an array
  local tmp=$IFS
  IFS=:
  local arr=($PATH)
  # remove /usr/local/bin from the array
  unset IFS
  arr=(${arr[@]%%/usr/local/bin})
  # replace in the array /usr/bin by /usr/local/bin:/usr/bin
  arr=(${arr[@]/\/usr\/bin//usr/local/bin:/usr/bin})
  # join the array with : as $PATH
  IFS=:
  PATH="${arr[*]}"
  export PATH
  IFS=$tmp
}

#
# Check Git presence. Abort script if not installed
#

check_minimal_git() {
  echo "check `cyan git`..."
  # git not detected in the $PATH
  if [[ -z `type -P git` ]]; then
    # git also not installed inside /Developer
    if [[ ! -x /Developer/usr/bin/git ]]; then
      abort 'git must be installed'
    fi
  fi
}

#
# Check if homebrew is already installed. If yes, just update it
# If no, install a minimal version (without all git history) in /usr/local/homebrew
#

check_homebrew() {

  #
  # Inner functions
  #

  function install() {
    echo "install `cyan homebrew`..."
    # chown /usr/local if I am not the owner
    if [[ `stat -f %u /usr/local` != `id -u` ]]; then
      echo "chown `cyan /usr/local` owner..."
      sudo chown `whoami` /usr/local
    fi

    # clone homebrew with the available git
    local tmp
    [[ `type -P git` ]] && tmp=git || tmp=/Developer/usr/bin/git

    # install minimal homebrew (without all repository history)
    eval "$tmp clone --depth 1 https://github.com/mxcl/homebrew.git /usr/local/homebrew"

    # temp path, only valid in this install session
    # required to call `brew` right after the install
    PATH=/usr/local/homebrew/bin:$PATH
    export PATH

    echo "check `cyan homebrew` install..."
    # check if brew is now in the path
    if [[ -z `type -P brew` ]]; then
      abort 'the scripted install of homebrew has failed. Please do it manually'
    fi
  }

  function update() {
    echo "update `cyan homebrew`..."
    # brew update: fetch the newest version of homebrew and all formulae from gitHub using git
    brew update
  }

  #
  # Script
  #

  echo "check `cyan homebrew`..."
  local tmp=`type -t brew`
  # homebrew detected, update it
  if [[ "$tmp" = 'file' || "$tmp" = 'function' ]]; then
    update
  else
    # brew not in the path and also not on the machine
    if [[ ! -x /usr/local/homebrew/bin/brew ]]; then
      install
    # it's only a path problem
    else
      # temp path, only valid in this install session
      PATH=/usr/local/homebrew/bin:$PATH
      export PATH
      update
    fi
  fi
  unset -f install
  unset -f update
}

#
# Check if command line tools are installed. It's required to compile homebrew formulas
# If no, prompt to install iabort the script
#

check_command_line_tools() {
  echo "check `cyan 'command line tools'`..."
  # check if xcode-select in the path
  if [[ -z `type -P "xcode-select"` ]]; then
    abort 'the command line tools must be installed. Please do it manually https://developer.apple.com/downloads'
  fi
  # prompt command line tools install and abort this script
  if [[ -z `"xcode-select" -p 2>/dev/null` ]]; then
    xcode-select --install 2>/dev/null
    abort 'the command line tools must be installed.'
  fi
}

#
# Check if `$1` was installed with homebrew. If yes, just upgrade it
# If no, install `$1` with homebrew
#

check_formula() {
  echo "check `cyan "homebrew $1"`..."
  # `$1`not found, install it
  if [[ -z `brew ls -1 | grep ^$1$` ]]; then
    echo "install `cyan "$1"` with homebrew..."
    brew install "$1"
  else
    # `$1` found, but need an upgrade
    if [[ `brew outdated | grep ^$1` ]]; then
      echo "upgrade `cyan "homebrew $1"`..."
      brew upgrade "$1"
    fi
  fi
}

#
# Run this script
#

check_sudo
path_local_first
check_minimal_git
check_homebrew
check_command_line_tools
check_formula git
check_formula node
